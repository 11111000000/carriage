#+title: Carriage-mode v1 — Основы и поведение
#+author: Peter Kosov <11111000000@email.com>
#+language: ru
#+options: toc:2 num:t
#+property: header-args :results silent

* Объём (Scope) и цели v1
- Цель: безопасное применение патчей, создаваемых LLM, прямо из org-документа.
- Входит:
  - Поддержка форматов v1: =sre=, =sre-batch= (./sre-v1.org) и =patch= (./patch-unified-diff-v1.org).
  - Запросы в LLM через транспорт (см. ./llm-transport-v1.org; адаптер gptel — по умолчанию), dry-run, предпросмотр, применение, git-коммиты (ветка WIP).
  - Работа только в org-mode буферах.
- Не входит в v1:
  - Многофайловые unified diff; бинарные патчи; авто-merge конфликтов; TRAMP-репозитории.

* Активация режима
- Carriage-mode включается только в org-mode.
- Локальная активация:
  - file-local variables или #+PROPERTY: carriage: t
- Зависимости: project.el; адаптер gptel (опционально); (опц.) magit.
- Режим отключается, если не обнаружен корень git-репозитория.

* Команды и ключи
- Норматив и подробности клавиш/команд: см. ./ui-v1.org (UI) и ./api-v1.org (API).

* Header-line
- Норматив: см. ./ui-v1.org (раздел Header-line).

* Mode-line
- Норматив: см. ./ui-v1.org (раздел Mode-line).

* Построение промптов (см. ./prompt-profiles-v1.org)
- Интенты: Ask (диалог, без =patch=), Patch (строго патчи).
- Suite определяет набор разрешённых :op и собирает системный промпт из фрагментов op-модулей.
- В Patch:
  - Для SRE — инъекция DELIM (генерирует инструмент), запрет текста вне блоков.
  - Для unified diff — строгий шаблон begin_patch с diff одного файла.
- Контекст:
  - Весь документ (C-c M-RET) или поддерево (C-c RET).
  - Сжатие контента при переполнении токенов (truncate разделов, summary).

* Приём ответа
- Допустимые спец-блоки: begin_patch/end_patch.
- Весь «шум» вне блоков игнорируется; неверные блоки маркируются предупреждениями.
- «Последняя итерация» помечается идентификатором CARRIAGE_ITERATION_ID:
  - Org-property на уровне документа/заголовка: CARRIAGE_ITERATION_ID="UUID" (строка).
  - Генерация: новый UUIDv4 создаётся при каждом send-buffer/send-subtree.
  - Каждому принятому блоку присваивается текстовое свойство :carriage-iteration-id с тем же значением; C-c ! выбирает блоки по совпадению идентификатора.

* Регистрация форматов (см. ./parser-registry-v1.org)
- Диспетчеризация по (:version, :op) → parser/dry-run/apply.
- Единый интерфейс для всех форматов:
  - parse → план операций
  - dry-run → отчёт, числа замен/валидность diff
  - apply → изменения в рабочем дереве + git add/commit

* Применение (см. ./apply-pipeline-v1.org)
- Порядок: dry-run → предпросмотр → подтверждение → apply.
- C-c ! — группа: остановка при первой ошибке; автоматический откат в v1 не выполняется.
- Внутригрупповый порядок:
  - delete → rename → create → patch → sre/sre-batch.
  - Для одного файла: create перед sre; rename перед sre (с новым путём); patch — перед sre, если оба присутствуют.
- Коммиты: по умолчанию один коммит на блок; опционально squash.

* Интеграция с Git (см. ./git-integration-v1.org)
- Определение корня: project.el → git rev-parse.
- Ветка WIP: carriage/WIP; автоматическое создание, защита от push по умолчанию.
- Поведение при незакоммиченных изменениях: предупреждение/стоп/стеш по настройке.

* Безопасность (см. ./security-v1.org)
- Политики: см. ./security-v1.org (пути, symlink, TRAMP, лимиты).
- Бинарные патчи — см. ./security-v1.org (в v1 запрещены).

* Конфигурация (Customize)
- carriage-mode-default-intent ('Ask | 'Patch)
- carriage-mode-default-suite ('auto-v1 | 'sre-v1 | 'patch-v1 | 'file-ops-v1)
- carriage-mode-default-backend (symbol|string), carriage-mode-default-model (string)
- carriage-mode-wip-branch (string)
- carriage-mode-confirm-apply-all (boolean)
- carriage-mode-auto-open-report (boolean), carriage-mode-auto-open-log (boolean), carriage-mode-auto-open-traffic (boolean)
- carriage-mode-show-diffs (boolean), carriage-mode-show-header-line (boolean), carriage-mode-show-mode-line-ui (boolean)
- carriage-mode-spinner-interval (number), carriage-mode-headerline-max-width (integer or nil), carriage-mode-use-icons (boolean)
- carriage-mode-max-batch-pairs (integer), carriage-mode-log-max-lines (integer), carriage-mode-traffic-max-lines (integer)
- carriage-mode-aux-window-side (symbol), carriage-mode-aux-window-size (number), carriage-mode-aux-window-reuse (boolean)

* Асинхронность и устойчивость
- Очередь задач: запрос → приём → разбор → dry-run → apply.
- Отмена/повтор, тайм-ауты, обработка сетевых ошибок, ретраи.
- Не блокировать UI; прогресс-индикаторы.

* Логирование и отчётность
- Буфер отчёта: имя *carriage-report*; содержит результаты dry-run и применений (таблица, ссылки на файлы).
- Журналы:
  - *carriage-log* — общий журнал (info/warn/error).
  - *carriage-traffic* — вход/выход LLM (сырой ответ, опционально).
- Ограничения размеров: усечение по верхней границе (например, 2000 строк на буфер); команды очистки доступны из UI.

* Тестирование (см. ./testing-v1.org)
- ERT-юниты для парсеров, интеграционные тесты с тестовым git-репо.
- Набор «золотых» Org-документов.

* Эволюция
- v1.1: транзакции, :preimage-sha, расширения regex/якорей.
- Обратная совместимость обязательна; новые возможности — опциональны.
