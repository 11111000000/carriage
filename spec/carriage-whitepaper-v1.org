#+title: Carriage Whitepaper v1 — Нарратив, Дао и основания
#+author: Peter Kosov <11111000000@email.com>
#+language: ru
#+options: toc:2 num:t
#+property: header-args :results silent

* Что такое Carriage-mode (зачем мы это делаем)
- Carriage-mode — «каретка» вязальной машинки для кода и документов. Он свивает из намерения (промпта) и контекста (org-структуры) полотно изменений (патчи) и мягко провязывает их в репозиторий.
- Это не «магический рефакторщик». Это инструмент для вдумчивой, но быстрой работы, где человек сохраняет контроль, а машина помогает удерживать форму и ритм.
- Цель — превратить диалог с ИИ в повторяемый и безопасный процесс изменений в кодовой базе, с ясными границами, проверками и обратной связью.

* Почему патчи, а не «прямое редактирование»
- Патч — это единица смысла, которую можно увидеть, проверить, обсудить, применить или отвергнуть. Он естественно ложится на git-практики.
- Прямые правки теряют контекст: что именно было задумано, где границы, как откатить. Патч сохраняет историю намерений.
- Патч позволяет отделить генерацию (модель) от принятия решения (человек + инструмент): сначала dry-run и предпросмотр, потом действие.

* Почему Org
- Org — живое пространство рассуждений: иерархия, сворачивание, заметки, код и текст вместе.
- В Org блок — естественная единица работы: его легко найти, свернуть, применить горячей клавишей.
- Разговор с моделью в контексте Org сохраняет не только результат, но и процесс: истории, обоснования, ветки решений.

* Принцип одного имени блока
- Мы выбираем один спец-блок =patch= для всех операций. Это уменьшает когнитивную нагрузку и вероятность «ошибок формата» у модели.
- Стабильность формы — ключ к воспроизводимым ответам: чем меньше вариантов, тем надёжнее поток.

* Две формы изменений: SRE и Unified Diff
- SRE (search/replace) — простая единица локальной замены. Она детерминируема, понятна и легко генерируется даже слабой моделью.
- Unified diff — мощный стандарт для более сложных правок, с опорой на git apply. Он универсален, читаем людьми и совместим с практиками ревью.
- Два инструмента — два пути воды: SRE для точечных русел, diff для перестройки берегов. Выбор зависит от задачи, но формат остаётся единым по оболочке.

* Почему позиционная SRE и один DELIM
- Метки и id внутри блоков — слабое место: их легко перепутать. Позиционный смысл (нечётный сегмент — FROM, чётный — TO) снимает лишние степени свободы.
- Один длинный DELIM на блок — простая и крепкая граница. Модель только повторяет его, а инструмент обеспечивает уникальность и авторесинхронизацию при редких коллизиях.
- Никаких base64 и длин: всё «как есть», пока не понадобится крайний случай. Меньше механики — меньше поломок.

* Минимализм опций — почему так
- Урезаем до костяка: :occur first|all (с :expect для all), :match literal|regex, :range при необходимости.
- Идея: инструментарий должен быть очевиден даже для слабых моделей и уставших людей. Три-четыре рычага лучше, чем десяток.
- Мы намеренно не нормализуем EOL/Unicode в v1 и не вводим «умные» эвристики: предсказуемость выше «магии».

* Сценарий использования (человеческий поток)
- Вы размечаете мысль в Org: заголовки как смысловые узлы, под ними — примеры, оговорки, ссылки.
- Переключаете Intent=Patch и выбираете Suite (например, auto-v1); инструмент подставляет пути и DELIM.
- Модель выдаёт блоки =patch=; вы запускаете dry-run, видите диффы и числа совпадений; подтверждаете и применяете в WIP-ветку.
- Если что-то не так — правите документ и повторяете запрос, а не «чиним руками в тишине»: история остаётся рядом с кодом.

* Безопасность как стиль
- Запрет выходов за корень, отказ на подозрительных путях и бинарных диффах — это не бюрократия, а бережное отношение к дереву.
- Dry-run — не «ещё один клик», а пауза перед шагом, чтобы увидеть, куда течёт вода.
- Ветка WIP — мягкая среда для экспериментов: ритм небольших коммитов делает ход лёгким.

* Диалог с ИИ: как мы удерживаем форму
- В Intent=Patch и выбранном Suite допускаются только блоки begin_patch/end_patch. Нет места для лирики — только действие.
- Инструмент генерирует сложные части (DELIM, пути, strip), модель заполняет простую матрицу.
- Примеры в промптах — не «подсказки», а ритуал. Он уменьшает вариативность и стабилизирует качество.

* Почему одна операция = один блок
- У блока есть пульс: его удобно читать, обсуждать, применять, откатывать. Это минимальная атомарность.
- Несколько правок одного файла? Один блок SRE-BATCH. Пара десятков файлов? Несколько блоков подряд. Структура остаётся понятной.

* Отношения с Git (гармония с существующей практикой)
- Мы не конкурируем с magit или привычками ревью, а добавляем «поток изменений», который легко интегрируется в уже известные процессы.
- Commit message лаконичен и функционален; история в WIP-ветке — это лаборатория, а не свалка.

* Не-цели (что мы сознательно не делаем в v1)
- Не пытаемся автоматом решать конфликты и «догадаться» о намерениях — лучше спросить и пересгенерировать.
- Не гонимся за полнотой опций: парочка ключевых рычагов важнее сотни переключателей.
- Не делаем TRAMP и бинарные патчи в v1: сложные миры потребуют отдельной техники.

* Почему это удобно человеку
- Читаемость на первом месте: блоки — как мини-PR, но рядом с причиной и обсуждением в Org.
- Комментарии внутри тел SRE-блоков не ломают парсинг и помогают запомнить «зачем».
- Выделенный DELIM — взглядом цепляется сразу; позиционная схема — легко проверяется.

* Риски и смягчения
- «Модель напутала форму» → строгий ритуал ответа, фильтрация, перегенерация.
- «Путь неверный» → нормализация, запреты, диагностические коды с подсказками.
- «Ничего не заменилось» → отчёт dry-run, отказ и рекомендация (например, проверить регистр или диапазон).
- «Коллизия разграничителя» → автоматическая ресинхронизация DELIM до применения.

* Эволюция без ломки
- v1.1 добавит транзакционные группы, якоря, preimage-хеш и, возможно, многоканальные патчи. Но принцип один: расширение опционально, поведение v1 остаётся стабильным.
- Версионирование на уровне блоков позволяет документам разных эпох жить вместе, как дерево, что обрастает кольцами, не теряя ствола.

* Антропология инструмента (как им будут жить)
- Индивидуальная практика: быстрые наброски → малые блоки → короткие циклы dry-run/apply — «пульс каретки».
- Командная практика: документ с блоками — место обсуждения, как PR-заявка до PR; коммиты в WIP — мост к основным веткам.
- Обучение: простые примеры и стабильный ритуал формируют мышечную память и снижают порог вхождения.

* Смысловые метафоры (Дао)
- Вода гладит камень формой русла, а не силой: формат — наш берег.
- Узел держится прочнее, когда верёвка не перекручена: меньше опций — крепче система.
- Каретка движется плавно, когда стежки повторяемы: begin → сегменты → end — и снова.

* Решения v1: что вошло и почему
- Одно имя блока: patch. Снижаем вариативность, укрепляем ритуал. Даже слабые модели иллюстрируют структуру верно, когда форма одна.
- Две формы изменений: SRE и unified diff. Два инструмента для разных масштабов: точечная правка и «архитектурный» дифф. Оболочка и ритуал остаются едины.
- Позиционная SRE и один DELIM. Мы убрали id и вложенные блоки: роль задаёт порядок сегментов, а единственный разделитель делает границы очевидными.
- Минимальный набор опций. Только то, что влияет на корректность намерения: occur (first|all), expect для all, match (literal|regex), range. Остальное — позже.
- Без нормализаций и «магии». EOL/Unicode не трогаем в v1: предсказуемость выше автоматизма. Там, где среда неоднородна, ответственность берёт человек.
- WIP-ветка и dry-run. Безопасное пространство для экспериментов и обязательная пауза осмысления перед действием.

* Компромиссы и осознанные отказы
- Не поддерживаем alias-имена блоков. Один берег — меньше размывания формы.
- Не вводим :occur N, :case, :unicode, :eol и base64 в v1. Более короткая шкала решений — меньше ложных выборов.
- Не делаем автоматического rollback. Останавливаемся на первой ошибке и работаем в WIP — достаточно для безопасности и ясности причинно-следственных связей.
- Не поддерживаем TRAMP и бинарные патчи в v1. Эти миры потребуют отдельной техники и ритуалов.
- Не решаем конфликты «за пользователя». Лучше спросить заново и уточнить намерение, чем гадать.

* Пользовательские пути
- Индивидуальный поток (одиночка)
  - Быстрые циклы: мысль → блок → dry-run → коммит в WIP. Малые коммиты, короткие шаги, ясные причины.
  - Разметка мысли в Org рядом с действием снижает когнитивную нагрузку: контекст всегда под рукой.
- Командная работа
  - Документ с блоками — прото-PR: обсуждение причины и формы изменений до PR в основную ветку.
  - WIP — лаборатория: ветвление, примерка подходов, создание «живых» рабочих прототипов.
- Менторинг и обучение
  - Ритуал упрощает онбординг: один формат, повторяемые шаги, понятные диффы.
  - История документа — учебник решений: не только «что поменяли», но и «почему так».

* Метрики успеха (как понять, что Дао соблюдается)
- Скорость цикла: с момента идеи до коммита в WIP — минуты, не часы.
- Читаемость: внешний наблюдатель понимает, что и зачем изменено, читая только блоки и комментарии в Org.
- Предсказуемость: одинаковый вход даёт одинаковый результат; доля «сюрпризов» при применении стремится к нулю.
- Безопасность: нулевые инциденты с разрушением дерева; отказ по умолчанию на сомнительных действиях.
- Воспроизводимость: любой блок можно применить заново по истечении времени и получить те же эффекты (при неизменном контексте).

* Антитипичные ошибки и как их избегать
- «Перегрузить формат опциями». Симптом: блоки тяжело читать и объяснять. Лекарство: вернуться к минимуму, вынести вариативность в валидации и диалог.
- «Исправлять руками в стороне». Симптом: история расслаивается, теряется намерение. Лекарство: чинить документ и регенерировать, сохраняя беседу рядом с кодом.
- «Доверять диффу без dry-run». Симптом: неожиданные эффекты. Лекарство: всегда смотреть предпросмотр и числа замен, а не «верить на слово».
- «Делать патчи сверх крупности». Симптом: трудный обзор, хрупкие контексты. Лекарство: дробить задачи и блоки, чтобы каретка шла ровно.

* Частые вопросы (FAQ)
- Почему не одна «умная» форма вместо двух (SRE и diff)?
  - Разные ритмы: локальная замена и структурный дифф решают разные задачи. Универсальность внутри одной формы рождает хрупкость.
- Почему не позволить модели выбирать разделитель?
  - Разделитель — ответственность инструмента. Чем меньше свобод, тем устойчивее ответ.
- Почему «один блок — одна операция»?
  - Это атомарность чтения, обсуждения и применения. Меньше конфликтов, проще ревью, яснее история.
- Можно ли сделать «магический режим исправь всё»?
  - Это против Дао осознанности. Быстрые циклы и малые шаги выигрывают на длинной дистанции.

* Дорожная карта (вектор, а не обещание)
- v1.1: транзакции, якоря, preimage-hash; расширения для regex; опциональные политики EOL/Unicode.
- v2+: поддержка бинарных артефактов, TRAMP/remote с ограничениями, многофайловые патчи с явными контрактами.

* Заключение
- Carriage-mode — это про осознанность в изменениях. Мы не «генерим код», мы ведём беседу, решаем задачи и оставляем след, понятный себе и другим.
- Минимализм форм, строгость валидаций, безопасность по умолчанию и уважение к привычкам разработчиков — четыре столпа, на которых стоит v1.
- Дальнейший рост возможен, но только так, чтобы не разрушать гармонию: расширяем берег, не меняя направление реки.
