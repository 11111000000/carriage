#+title: Async Workflow v1 — Неблокирующий пролог, Abort и таймауты
#+author: Carriage Team
#+language: ru
#+options: toc:2 num:t

* Назначение
- Установить норматив «end-to-end неблокирующий» apply-процесс:
  - Пролог (обнаружение репо и переход на WIP-ветку) выполняется асинхронно.
  - Шаги пайплайна (dry-run/apply) и пролог имеют единые правила Abort/таймаутов/логов.
  - UI/буфер не блокируются ни на одном этапе.

* Область
- Пролог apply-пайплайна: git rev-parse --git-dir, rev-parse/checkout/-b WIP, init empty commit при unborn HEAD.
- Абстракция Git-хелперов уровня utils/git: обязательна async-first; sync-обёртки допустимы только вне интерактивного/async пути.

* Норматив (обязательный)
** Асинхронный пролог
- В carriage-apply-plan-async:
  - Если carriage-apply-require-wip-branch=t — сначала «ensure repo → checkout/create WIP → (unborn HEAD) → пустой коммит».
  - Все операции пролога — через make-process + sentinel + run-at-time таймаут; запрещено вызывать accept-process-output на UI-пути.
  - Только по успешном завершении пролога запускается цепочка шагов apply (carriage--apply-next).

** Abort/таймауты
- Пролог регистрирует :abort-fn так же, как шаги движка:
  - Abort должен:
    - Отменять активный процесс (interrupt/kill).
    - Снимать таймеры.
    - Завершать пайплайн со статусом error/aborted (без блокировок).
- Таймаут пролога (по умолчанию равен git timeout из FREEZE) приводит к завершению процесса и on-fail(reason=timeout).

** Токен и унификация
- Async-хелперы Git возвращают «токен» (plist) с полями:
  - :engine 'git, :process PROC, :pid PID, :timer TMR, :stdout-buf, :stderr-buf
  - Допустимы дополнительные поля (:argv, :path).
- Пайплайн хранит токен «текущей активности» в STATE и переустанавливает :abort-fn на каждый этап (пролог/движок/FS-таймеры).

** Логирование
- Обязательные записи для пролога и шагов:
  - begin/exec (dir, cmd строкой), pid, exit (code, stdout/stderr bytes), reason (ok|timeout|aborted).
- Пролог логируется в те же *carriage-log*/*carriage-traffic* (опционально для stdout/stderr), без «ожидательных» тиков UI.

* Референсные API (норматив)
- Следующие функции считаются публичными async-хелперами Git (минимум v1):
  - carriage-git-run-async ROOT ARGV ON-DONE ON-FAIL → TOKEN
  - carriage-git-ensure-repo-async ROOT ON-DONE ON-FAIL
  - carriage-git-checkout-wip-async ROOT [BRANCH] ON-DONE ON-FAIL
- Контракты:
  - Сразу возвращают TOKEN/тут же планируют операции; ON-DONE/ON-FAIL вызываются ровно один раз.
  - ON-FAIL получает plist (:exit :stderr :stdout :reason?).
  - Таймаут/Abort корректно завершают процесс; финализация чистит буферы/таймеры.

* Изменения в пайплайне (обязательно)
- carriage-apply-plan-async:
  - Удалить любые sync-вызовы Git на UI-пути.
  - Перед первым шагом вызвать асинхронный пролог; при успехе — запуск очереди; при сбое — завершить отчёт и вернуть UI в idle/error.
  - Пролог должен устанавливать UI-состояние 'apply (по желанию UX) и регистрировать Abort.

* UI/UX (требования к видимости)
- Состояние 'apply (и/или спиннер) может отображаться во время пролога.
- Кнопка [Abort] должна прерывать и пролог, и любой шаг.
- Автооткрытие логов/отчётов — по прежним правилам; пролог не переключает фокус.

* Тестирование (минимум)
- Async возврат: carriage-apply-plan-async возвращает немедленно; пролог завершает с on-done, затем стартует первый шаг.
- Abort во время пролога: процесс убит, отчёт завершён, UI в idle/error.
- Таймаут пролога: on-fail(reason=timeout), UI не блокируется.
- Паритет отчётов: :pid и :elapsed-ms доступны в sync-обёртках шагов движка; пролог может не отражаться в items (достаточно логов).

* Соответствие и миграция
- Любые accept-process-output-петли допустимы только в чисто синхронных обёртках вне интерактивного/async пути.
- Реализации обязаны удалить sync-пролог из carriage-apply-plan-async.
- Совместимость v1: формат блоков/движки не меняются; изменения касаются только способа оркестровки.


