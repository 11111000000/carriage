#+title: Context Integration v1.1 — gptel + документальные блоки
#+author: Carriage Team
#+language: ru
#+options: toc:2 num:t

* Цели
- Единая модель включения контекста в запросы к LLM:
  - Источник A: gptel-context (буферы/файлы).
  - Источник B: документальные блоки #+begin_context ... #+end_context.
- Управление — двумя тумблерами в модлайне: [Ctx] и [Files] (оба включены по умолчанию).
- Безопасность: нормализация путей, запрет TRAMP/вне корня проекта, лимиты размера.

* Формат блока документа
- В org-буфере:
  #+begin_context
  ./rel/path1
  ../rel/path2
  #+end_context
- Каждая непустая строка — путь (пустые и строки, начинающиеся с #, игнорируются).
- Пути:
  - Относительные — относительно корня проекта (git root), фоллбэк — default-directory.
  - Абсолютные — допускаются только если попадают внутрь корня проекта (file-truename ⊆ project-root).
  - TRAMP — запрещены.

* Область поиска блока
- В Org: искать ближний блок в текущем заголовке; если нет — подниматься по родителям.
- Фоллбэк: при отсутствии — сканировать весь буфер.
- Не Org: сканировать весь буфер.

* Нормализация и чтение
- Нормализация: expand-file-name + file-truename; проверка вхождения в корень проекта.
- Чтение файлов безопасно; бинарные файлы (NUL) — содержимое не включается (только путь + причина).
- Отсечения:
  - Максимум файлов: 100 (carriage-mode-context-max-files).
  - Максимум суммарного содержимого: 1024 KiB (carriage-mode-context-max-total-bytes).
  - При превышении — включать только пути (content omitted), записывать предупреждение.

* Дедупликация
- По truename; при совпадении между источниками A и B — оставлять один элемент.

* Инъекция в запрос
- Способ задаётся carriage-mode-context-injection:
  - 'system — контекст форматируется и добавляется к :system (по умолчанию).
  - 'user — контекст добавляется в начало :prompt.
- Форматирование:
  - Заголовок «;; Context (system|user): files=… included=… omitted=… total-bytes=…»
  - Для каждого файла:
    - In file REL/PATH:
      #+begin_src <lang>
      CONTENT
      #+end_src
    - Если содержимое опущено: «In file REL/PATH: [content omitted] (REASON)».
  - Язык блока определяется по расширению (el → emacs-lisp, js → js, py → python, org → org, иначе text).

* API (минимум)
- carriage-context-collect (&optional buffer root) → plist:
  - :files — список (:rel :true :content? :reason?)
  - :warnings — список сообщений
  - :omitted — число
  - :stats — (:total-bytes N :included M :skipped K)
- carriage-context-format (ctx &key where) → string:
  - Форматирует заголовок/предупреждения/блоки для вставки.
- Интеграция:
  - carriage--build-context добавляет :context-text и :context-target (system|user) в CTX для prompt builder.
  - carriage-build-prompt учитывает :context-text и встраивает по месту.

* UI и управление
- Тумблеры:
  - carriage-toggle-include-gptel-context (C-c e t c)
  - carriage-toggle-include-doc-context (C-c e t f)
- В модлайне — иконки (при наличии all-the-icons) и текстовые ярлыки [Ctx]/[Files] в TTY.

* Тестирование
- Позитив: относительные пути внутри проекта → включение содержимого в пределах лимита; корректная инъекция в system.
- Негатив:
  - TRAMP/вне проекта — пропуск с предупреждением.
  - Бинарный файл — только путь и причина.
  - Превышение лимита — только пути и предупреждение.
- Дедупликация: один файл из обоих источников включается один раз.

* Безопасность
- Никакой TRAMP; запретать несуществующие, небезопасные и выходящие за проект пути.
- Не включать содержимое при размерных ограничениях; только метаданные со ссылкой на причину.
