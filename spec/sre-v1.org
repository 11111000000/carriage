#+title: Search/Replace (SRE) v1 Specification
#+author: Peter Kosov <11111000000@email.com>
#+language: ru
#+options: toc:2 num:t
#+property: header-args :results silent

* Назначение и охват
- Определяет формат поисково-заменяющих патчей (SRE) для Carriage-mode.
- Цель: простой, надёжный, удобочитаемый человеком, легко генерируемый даже простой LLM.
- Основной принцип: один внешний Org-блок = одна целевая сущность (обычно один файл); внутри — пары FROM→TO.
- Версия спецификации: "1" (далее — v1).

* Термины
- Блок patch — специальный Org-блок вида:
  - #+begin_patch (<plist>) ... #+end_patch
- Пара (pair) — два последовательно заданных сегмента: первый сегмент — FROM, второй — TO.
- Сегмент — участок текста между строками-ограничителями с общим разделителем DELIM:
  - Открытие: строка, равная "<<" + DELIM (без пробелов).
  - Закрытие: строка, равная ":" + DELIM (без пробелов).
- Опции SRE по умолчанию встроены: :occur first, :match literal. Изменить их можно директивой #+pair, применимой только к следующей паре FROM→TO.
- Директива #+pair — строка с plist-опциями, применимыми только к ближайшей следующей паре. Других директив в теле блока не должно быть.

* Общее устройство блока SRE
** Заголовок (обязательные и опциональные ключи)
Блок должен начинаться строкой:
- #+begin_patch (:version "1" :op OP :file "relative/path" :delim "TOKEN")

Где:
- :version — строка, равная "1".
- :op — "sre" (одна пара FROM→TO) или "sre-batch" (несколько пар).
- :file — относительный путь к файлу внутри корня проекта.
- :delim — обязателен; требования к длине и форме см. ./index.org (секция FREEZE).

Допустимые дополнительные ключи заголовка:
- Требования к :delim (длина и форма) — см. ./index.org (секция FREEZE).

Блок должен завершаться строкой:
- #+end_patch

- Тело блока (грамматика)
Внутри patch-блока допустимы:
- Комментарии для человека: любые строки, кроме начинающихся с "#+pair", "<<DELIM" и ":DELIM" — парсер их игнорирует.
- Директива пары (# +pair): строка = "#+pair (<plist>)" — опции к следующей паре.
- Сегменты:
  - Открытие: строка равная "<<DELIM"
  - Содержимое: произвольный текст до строки, равной ":DELIM"
  - Парсер формирует пары как (FROM,TO) по позициям сегментов.

Для :op "sre": ровно 2 сегмента (FROM/TO).
Для :op "sre-batch": чётное число сегментов (>0), чередуются парами (FROM1→TO1, FROM2→TO2, ...).

Любые непризнаваемые строки вне директив и сегментов игнорируются как комментарии.


** Формальная грамматика (EBNF)
#+begin_src text
patch-block    := patch-header newline patch-body patch-footer
patch-header   := "#+begin_patch" ws plist newline
patch-footer   := "#+end_patch" newline?
plist          := "(" ws kv-pair (ws kv-pair)* ws ")"
kv-pair        := ":"symbol ws value
value          := string | number | symbol | list
list           := "(" (value (ws value)*)? ")"
ws             := space-or-tab*

Обязательные ключи:
  :version "1"
  :op ("sre" | "sre-batch")
  :file "relative/path"
  :delim "TOKEN"

patch-body     := (comment-line | pair-line | segment)*
comment-line   := любая строка, не равная pair-line, segment-open, segment-close
pair-line      := "#+pair" ws plist newline

segment        := segment-open segment-payload segment-close
segment-open   := "<<" TOKEN newline
segment-close  := ":" TOKEN newline
segment-payload:= произвольное содержимое до первой строки, равной segment-close

Интерпретация сегментов:
  op="sre"       → ровно 2 сегмента: 1-й=FROM, 2-й=TO
  op="sre-batch" → чётное число сегментов >0: (FROM1,TO1), (FROM2,TO2), ...
  #+end_src
* Семантика поиска/замены
** Область поиска
- По умолчанию — весь файл.
- Если указано :range (:start-line N :end-line M) — поиск ограничен указанными включительными границами.
- Политика EOL и Unicode: см. ./security-v1.org.

** Соответствие
- :match literal — поиск точной подстроки.
- :match regex — поиск согласно Emacs regexp (допускается многострочность). Никакие PCRE-специфичные конструкции (lookbehind и т.п.) не гарантируются.

** Выбор вхождений
- :occur first — заменяется первое найденное вхождение.
- :occur all — заменяются все неперекрывающиеся вхождения; :expect K обязателен.
- :expect K — ожидаемое число замен; при несоответствии — отказ (fail) на этапе dry-run.

** Идемпотентность
- Инструмент выполняет один проход в v1. Дополнительная проверка «второго прохода» не выполняется; при необходимости предупреждение об идемпотентности может быть показано в отчёте dry-run.

* Парсинг (нормативно)
** Состояния (конечный автомат)
- Вход: текст блока, DELIM, plist заголовка.
- Инициализация:
  - Проверить :version = "1", :op ∈ {"sre","sre-batch"}, валидность :file, нормализовать путь (запрет выходов за корень).
  - pending-opts = nil.
- Сканирование строк тела:
  - Если строка "#+pair (<plist>)" → pending-opts = <plist> для следующей пары.
  - Если строка равно "<<DELIM" → начать сегмент накопления; читать до строки, равной ":DELIM". Сохранить payload. Сегменты накапливать в список.
  - Иные строки игнорировать (комментарии).
- Завершение:
  - Для "sre": сегментов должно быть ровно 2. Иначе — ошибка.
  - Для "sre-batch": число сегментов должно быть чётным (>0). Иначе — ошибка.
  - Сформировать пары по двум сегментам: (FROM, TO) последовательно.
  - К каждой паре применить опции: объединить pending-opts со встроенными дефолтами; затем pending-opts ← nil.
  - Для каждой пары проверить: корректность plist; если :occur all и нет :expect — ошибка.

** Диагностика парсера (минимум)
- Ошибка: несоответствие версии/опа/пути (вне корня).
- Ошибка: нет сегментов или их количество нечётно.
- Ошибка: незакрытый сегмент (нет ":DELIM").
- Ошибка: :occur all без :expect.
- Предупреждение: :range вне фактических границ файла (после чтения — скорректировать или отказ, по политике инструмента).
- Предупреждение: при regex — неподдерживаемые конструкции (по проверке валидатором regexp).

* Применение (нормативно)
** Dry-run
- Политика dry-run, отчёты и подтверждение см. ./apply-pipeline-v1.org.
- Для SRE: учитываются :occur, :match, :range; при :occur all обязателен :expect.

** Применение
- Пары применяются по порядку; каждая следующая пара видит результат предыдущих замен.
- Общие правила применения и коммитов — см. ./apply-pipeline-v1.org и ./git-integration-v1.org.

** Коллизии с разделителем (DELIM)
- Генерация и ресинхронизация делимитера описаны в ./parser-impl-v1.org.
- Кратко: инструмент генерирует :delim; при коллизии выполняется пересинхронизация токена до dry-run.

** Безопасность и ограничения
- Политики пути, symlink и лимитов: см. ./security-v1.org и ./index.org (секция FREEZE).
- Регулярные выражения: допустим только Emacs-flavor; детали и валидация — см. ./security-v1.org.
- UI-подтверждения и поведение для больших объёмов — см. ./ui-v1.org.

* Рекомендации по промпту (для режима Code)
- Шаблоны ответов и жёсткие требования профиля Code см. ./prompt-profiles-v1.org.
- В этом файле примеры приводятся исключительно как иллюстрации формата.

* Примеры
** SRE (одна пара)
#+begin_patch (:version "1" :op "sre" :file "src/foo.el" :delim "d7e2b5")
<<d7e2b5
(defun foo
:d7e2b5
<<d7e2b5
(defun foo-v2
:d7e2b5
#+end_patch
#+end_src


** SRE-BATCH (две пары с локальными опциями)
#+begin_patch (:version "1" :op "sre-batch" :file "src/app.py" :delim "d7e2b5")
;; Пара 1 — понижаем уровень логирования
<<d7e2b5
LOGGER.info(
:d7e2b5
<<d7e2b5
LOGGER.debug(
:d7e2b5

#+pair (:occur all :expect 3 :match regex)
;; Пара 2 — масштабная замена таймаутов
<<d7e2b5
\btimeout\s/=\s*30\b
:d7e2b5
<<d7e2b5
timeout=60
:d7e2b5
#+end_patch

* Эволюция версии (v1→v1.1 и далее)
- v1.1 (потенциально): транзакционные группы, :preimage-sha для фиксации состояния файла, s-expression якоря.
- Правило стабильности: парсер должен быть назад-совместим с v1, отвергать неизвестные :version.

* Архитектурные принципы
- Один блок — одна целевая сущность (обычно один файл); оперирует одним типом действия (:op ∈ {sre, sre-batch}).
- Детерминированный парсинг:
  - Никаких вложенных структур; только плоские сегменты с одним :delim.
  - Парсер — конечный автомат “сегмент→сегмент” с позиционной интерпретацией (нечётный=FROM, чётный=TO).
  - Неизвестные строки вне сегментов игнорируются (комментарии), список допустимых директив закрыт (#+pair).
- Версионирование и совместимость:
  - Заголовок несёт :version; парсер обязан отвергать неизвестные версии.
  - Изменения в минорных версиях не ломают грамматику (добавления — только опциональны).
- Разделение ответственности:
  - Формат описывает намерение (что менять), а не процесс (как именно это делать в редакторе).
  - Модуль “парсер” не выполняет замен; он производит нормализованный план операций.
  - Модуль “апплаер” реализует dry-run, дифф, применение, коммит, обработку конфликтов.
- Модель-дружественность:
  - Один инвариантный шаблон ответа; отсутствие вычислений (без base64/длин/индексов).
  - Одна опора на блок — :delim (выдаётся инструментом; модель его копирует).
- Человеко-дружественность:
  - Внешний блок хорошо сворачивается в Org и является единицей применения (C-c C-c).
  - Комментарии “;; …” и пояснительные строки поощряются; не мешают парсингу.
- Безопасность:
  - Жёсткая нормализация путей (:file относительный, без выхода за корень).
  - При regex — только Emacs-flейвор; валидатор заранее выявляет неподдерживаемые конструкции.
  - Для :occur all требуется :expect (fail-fast политика).
- Наблюдаемость и воспроизводимость:
  - Dry-run всегда доступен; отчёт показывает количество совпадений по парам и мини-дифы.
  - Логи включают :version, :op, :file, хеш входного состояния (если включён), суммарную статистику замен.

* Базовые принципы формата (Дао)
- Простота над формальностью: минимум синтаксиса, максимум определённости.
- Позиция над ярлыками: роль FROM/TO задаёт порядок, а не ключевые метки.
- Явные границы: один длинный :delim на блок вместо множества хрупких маркеров.
- Предсказуемость: одинаковое поведение для одинакового ввода; отсутствие скрытых эвристик.
- Безопасность по умолчанию: dry-run, проверка :expect, отказ при сомнительных путях/регексах.
- Расширяемость без ломки: новые возможности — через опциональные директивы и минорные версии.
- Инструмент важнее модели: инструмент генерирует сложное (delim, валидации), модель — только структуру.

* Инварианты и контракты
- Чётное число сегментов для sre-batch; ровно 2 — для sre.
- :occur all → :expect обязателен; иначе отказ.
- :file указывает на существующий файл для sre/sre-batch (до применения); для create/delete/rename — другие правила (в отдельной спецификации).
- Комментарии не меняют семантику; директивы (#+pair) применяются только вне сегментов.
- Парсер не изменяет содержимое; апплаер может переписать :delim при коллизии токена (до применения).

* Матрица минимальных тестов
- Полный план тестирования: см. ./testing-v1.org.
- Минимум для SRE: базовые и отрицательные сценарии (сегменты, :occur/:expect, :range, regex) — детали в ./testing-v1.org.

* Имя спец-блока
- Источник истины по имени спец-блока: см. ./parser-registry-v1.org.
