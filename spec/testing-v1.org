#+title: Testing v1 — План тестирования
#+author: Peter Kosov <11111000000@email.com>
#+language: ru
#+options: toc:2 num:t

* Цели
- Гарантировать корректность парсеров, dry-run и применения.
- Покрыть позитивные и негативные сценарии, краевые случаи.

* Наборы тестов
** Юнит-тесты (ERT)
- Парсеры:
  - SRE: корректные/некорректные сегменты, директивы #+pair.
  - SRE: превышение лимита пар в sre-batch → SRE_E_LIMITS.
  - SRE: пересинхронизация DELIM → предупреждение SRE_W_DELIM_RESYNC (при успехе), ошибка SRE_E_COLLISION_DELIM (при провале).
  - SRE: :range вне границ → clamp и предупреждение SRE_W_RANGE_CLAMP; одинаковое поведение dry-run/apply.
  - PATCH: многофайловый diff → отказ, /dev/null create/delete, :strip логика.
  - PATCH: rename/copy прелюдии → PATCH_E_RENAME_COPY; бинарные секции → PATCH_E_BINARY.
  - File Ops: create/delete/rename — предусловия, :mkdir, :ensure-final-newline, конфликты путей и существование/отсутствие файлов; create: валидация :delim (=6 hex, \=[0-9a-f]\{6\}\'), негативный кейс при неверном токене.
- Валидаторы regexp (Emacs flavor): неподдерживаемые конструкции → ошибка.
- Нормализация путей: запрет абсолютов и «..».
- TRAMP/remote: отказ при (file-remote-p) t.

** Интеграционные
- Тестовый git-репозиторий (временный каталог).
- Apply pipeline:
  - delete → rename → create → patch → sre/sre-batch порядок.
  - Сбой в середине группы → остановка без автоматического отката.
  - Dry-run отчёты и подтверждение.
- gptel-mock: имитация ответа LLM с блоками:
  - Стрим: несколько чанков STRING → t; проверка, что UI переходит sending→streaming→idle и спиннер останавливается.
  - Ошибка: nil → состояние error, лог и завершение (carriage-transport-complete t).
  - Abort: 'abort → обработчик отмены вызывает gptel-abort; состояние error.
- echo (dev): без gptel — backend='echo' стримит тестовые чанки, проверяем видимость в *carriage-traffic*, переходы состояний и корректную отмену (abort).

** Золотые документы (golden files)
- Набор org-файлов с известными блоками и ожидаемыми результатами.
- Тесты «без изменений» (идемпотентность).

* Как запускать
- emacs -Q -batch -l ert -l test/run.el -f ert-run-tests-batch-and-exit

* Метрики качества
- Покрытие веток в парсерах и апплаерах.
- Время на dry-run и применение больших файлов (пороговые значения).

* Примитивные фикстуры (elisp-скелеты)
#+begin_src emacs-lisp
(require 'ert)

;; SRE
(ert-deftest carriage-sre-parse-basic ()
  (should (fboundp 'carriage-parse-sre)))

(ert-deftest carriage-sre-occur-all-expect-required ()
  (let ((plan '((:version "1" :op 'sre-batch :file "x"
                  :pairs ((:from "a" :to "b" :opts (:occur all)))))))
    ;; skeleton: expect error on dry-run without :expect
    (should t)))

;; Unified diff
(ert-deftest carriage-diff-parse-one-file ()
  (should (fboundp 'carriage-parse-diff)))

(ert-deftest carriage-diff-git-check-fails ()
  ;; skeleton: simulate git apply --check failure
  (should t))

;; File ops
(ert-deftest carriage-create-validate-and-apply ()
  (should (fboundp 'carriage-parse-create)))

(ert-deftest carriage-delete-validate-and-apply ()
  (should (fboundp 'carriage-parse-delete)))

(ert-deftest carriage-rename-validate-and-apply ()
  (should (fboundp 'carriage-parse-rename)))

;; BUGFIX regression: create :delim must be exactly 6 lower hex; anchor with \= and \'
(ert-deftest carriage-create-delim-validation ()
  (let ((hdr '(:version "1" :op "create" :file "x" :delim "1db651"))
        (bad '(:version "1" :op "create" :file "x" :delim "ZZZZZZ")))
    (should (ignore-errors
              (carriage-parse-create hdr "<<1db651\nok\n:1db651\n" default-directory)))
    (should-error
     (carriage-parse-create bad "<<ZZZZZZ\nok\n:ZZZZZZ\n" default-directory))))

;; Security and env
(ert-deftest carriage-path-normalization ()
  (should t))

(ert-deftest carriage-tramp-detected-and-refused ()
  (should t))
#+end_src
