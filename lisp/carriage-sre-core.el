;;; carriage-sre-core.el --- Core SRE helpers (shared)  -*- lexical-binding: t; -*-

(require 'cl-lib)
(require 'subr-x)

(defun carriage--sre--rewrite-delim-markers (body old new)
  "Rewrite only true marker lines using OLD â†’ NEW token in BODY."
  (let* ((open-old (concat "<<" old))
         (close-old (concat ":" old)))
    (with-temp-buffer
      (insert body)
      (goto-char (point-min))
      (let* ((out '())
             (state 'idle))
        (dolist (ln (split-string (buffer-string) "\n" nil nil))
          (let* ((tln (string-trim ln)))
            (cond
             ((and (eq state 'idle) (string= tln open-old))
              (let* ((len (length ln))
                     (i 0) (j (1- len)))
                (while (and (< i len)
                            (let* ((ch (aref ln i)))
                              (or (eq ch ?\s) (eq ch ?\t))))
                  (setq i (1+ i)))
                (while (and (>= j 0)
                            (let* ((ch (aref ln j)))
                              (or (eq ch ?\s) (eq ch ?\t))))
                  (setq j (1- j)))
                (let* ((prefix (substring ln 0 i))
                       (suffix (substring ln (1+ j))))
                  (push (concat prefix "<<" new suffix) out)))
              (setq state 'in))
             ((and (eq state 'in) (string= tln close-old))
              (let* ((len (length ln))
                     (i 0) (j (1- len)))
                (while (and (< i len)
                            (let* ((ch (aref ln i)))
                              (or (eq ch ?\s) (eq ch ?\t))))
                  (setq i (1+ i)))
                (while (and (>= j 0)
                            (let* ((ch (aref ln j)))
                              (or (eq ch ?\s) (eq ch ?\t))))
                  (setq j (1- j)))
                (let* ((prefix (substring ln 0 i))
                       (suffix (substring ln (1+ j))))
                  (push (concat prefix ":" new suffix) out)))
              (setq state 'idle))
             (t (push ln out)))))
        (mapconcat #'identity (nreverse out) "\n")))))

(provide 'carriage-sre-core)
;;; carriage-sre-core.el ends here
